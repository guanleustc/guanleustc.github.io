[{"authors":["Jiameng Shi","Wenqiang Li","Wenwen Wang","**Le Guan**"],"categories":null,"content":"","date":1692244800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692244800,"objectID":"a1add01285a4a848879c2ec44b451a72","permalink":"https://guanle.org/publication/ipea/","publishdate":"2023-08-17T00:00:00-04:00","relpermalink":"/publication/ipea/","section":"publication","summary":"Although numerous dynamic testing techniques have been developed, they can hardly be directly applied to firmware of deeply embedded (e.g., microcontroller-based) devices due to the tremendously different runtime environment and restricted resources on these devices. This work tackles these challenges by leveraging the unique position of microcontroller devices during firmware development. That is, firmware de- velopers have to rely on a powerful engineering workstation that connects to the target device to program and debug code. Therefore, we develop a decoupled firmware testing framework named IPEA, which shifts the overhead of resource-intensive analysis tasks from the microcontroller to the workstation. Only lightweight “needle probes” are left in the firmware to collect internal execution information without processing it. We also instantiated this framework with a sanitizer based on pointer capability (IPEA-San) and a greybox fuzzer (IPEA-Fuzz). By comparing IPEA-San with a port of AddressSanitizer for micro- controllers, we show that IPEA-San reduces memory overhead by 62.75% in real-world firmware with better detection accuracy. Combining IPEA-Fuzz with IPEA-San, we found 7 zero-day bugs in popular IoT libraries (3) and peripheral driver code (4).","tags":null,"title":"Facilitating Non-Intrusive In-Vivo Firmware Testing with Stateless Instrumentation","type":"publication"},{"authors":["Lingyun Situ","Chi Zhang","**Le Guan**","Zhiqiang Zuo","Linzhang Wang","Xuandong Li","Peng Liu","Jin Shi"],"categories":null,"content":"","date":1690862400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1690862400,"objectID":"89d739d9a70c55d39e4141c4b34f34d2","permalink":"https://guanle.org/publication/situ-2023-physical/","publishdate":"2023-08-01T00:00:00-04:00","relpermalink":"/publication/situ-2023-physical/","section":"publication","summary":"With the rapid expansion of the Internet of Things, a vast number of microcontroller-based IoT devices are now susceptible to attacks through the Internet. Vulnerabilities within the firmware are one of the most important attack surfaces. Fuzzing has emerged as one of the most effective techniques for identifying such vulnerabilities. However, when applied to IoT firmware, several challenges arise, including: (1) the inability of firmware to execute properly in the absence of peripherals, (2) the lack of support for exploring input spaces of multiple peripherals, (3) difficulties in instrumenting and gathering feedback, and (4) the absence of a fault detection mechanism. To address these challenges, we have developed and implemented an innovative peripheral-independent hybrid fuzzing tool called FirmHybirdFuzzer. This tool enables testing of microcontroller- based firmware without reliance on specific peripheral hardware. First, a unified virtual peripheral was integrated to model the be- haviors of various peripherals, thus enabling the physical devices- agnostic firmware execution. Then, a hybrid event generation approach was used to generate inputs for different peripheral accesses. Furthermore, two-level coverage feedback was collected to optimize the testcase generation. Finally, a plugin-based fault detection mechanism was implemented to identify typical memory corruption vulnerabilities. A Large-scale experimental evaluation has been performed to show FirmHybirdFuzzer’s effectiveness and efficiency.","tags":null,"title":"Physical Devices-Agnostic Hybrid Fuzzing of IoT Firmware","type":"publication"},{"authors":["Shariful Alam","**Le Guan**","Zeyu Chen","Haining Wang","Jidong Xiao"],"categories":null,"content":"","date":1681444800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681444800,"objectID":"8de0e5baa974da91e1c83f3c4545db1f","permalink":"https://guanle.org/publication/causec/","publishdate":"2023-04-14T00:00:00-04:00","relpermalink":"/publication/causec/","section":"publication","summary":"As cold boot attacks become a realistic threat to cryptographic systems, several defense solutions have been proposed in the past decade to protect cryptographic systems against such attacks. Interestingly, most of these defense solutions are implemented at the kernel level. Yet running them at the kernel level is risky. Given the complexity of these defense solutions, they inevitably introduce vulnerabilities that could be exploited by attackers and then lead to the compromise of the entire operating system. In this paper, we present CAUSEC which avoids storing crypto keys and other sensitive information in the memory and performs key computation in the cache. CAUSEC protects cryptographic systems against cold boot attacks, but is mostly deprivileged to the user mode. Our experimental results demonstrate that CAUSEC secures key computation and incurs reasonable performance overhead: 11.99% in decryption rate and 7.1% in decryption/signing requests processing when incorporated with the Apache web server.","tags":null,"title":"CAUSEC: Cache-based Secure Key Computation with (Mostly) Deprivileged Execution","type":"publication"},{"authors":["Kai Cheng","Yaowen Zheng","Tao Liu","**Le Guan**","Peng Liu","Hong Li","Hongsong Zhu","Kejiang Ye","Limin Sun"],"categories":null,"content":"","date":1680321600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680321600,"objectID":"530f9dc3ad5d2b8f5b595116d9cdad15","permalink":"https://guanle.org/publication/em-taint/","publishdate":"2023-04-01T00:00:00-04:00","relpermalink":"/publication/em-taint/","section":"publication","summary":"Although the importance of using static taint analysis to detect taint-style vulnerabilitiesin Linux-based embedded firmware is widely recognized, existing approaches are plagued by following major limitations: (a) Existing works cannot properly handle indirect call on the path from attacker-controlled sources to security-sensitive sinks, resulting in lots of false negatives. (b) They employ heuristics to identify mediate taint source and it is not accurate enough, which leads to high false positives.To address issues, we propose EmTaint, a novel static approach for accurate and fast detection of taint-style vulnerabilities in Linux-based embedded firmware. In EmTaint, we first design a structured symbolic expression-based (SSE-based) on-demand alias analysis technique. Based on it, we come up with indirect call resolution and accurate taint analysis scheme. Combined with sanitization rule checking, EmTaint can eventually discovers a large number of taint-style vulnerabilities accurately within a limited time. We evaluated EmTaint against 35 real-world embedded firmware samples from six popular vendors. The result shows EmTaint discovered at least 192 vulnerabilities, including 41 n-day vulnerabilities and 151 0-day vulnerabilities. At least 115 CVE/PSV numbers have been allocated from a subset of the reported vulnerabilities at the time of writing. Compared with state-of-the-art tools such as KARONTE and SaTC, EmTaint found significantly more vulnerabilities on the same dataset in less time.","tags":null,"title":"Detecting Vulnerabilities in Linux-based Embedded Firmware with SSE-based On-demand Alias Analysis","type":"publication"},{"authors":["Wei Zhou","Zhouqi Jiang","**Le Guan**"],"categories":null,"content":"","date":1672549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672549200,"objectID":"812dc8865e740edc1c56b4d412872969","permalink":"https://guanle.org/publication/mpu-1/","publishdate":"2023-01-01T00:00:00-05:00","relpermalink":"/publication/mpu-1/","section":"publication","summary":"As more and more microcontroller-based embedded devices are connected to the Internet, as part of the Internet-of-Things (IoT), previously less tested (and insecure) devices are exposed to miscreants. To prevent them from being compromised, the memory protection unit (MPU), which is readily available on many of these devices, has the potential to play an important role in enforcing defense mechanisms. In this work, we comprehensively studied the MPU adoption in top operating systems for microcontrollers. Specifically, we investigate whether MPU is supported, how it is used, and whether the claimed security requirement has been effectively achieved by using it. We conclude that due to the added complexities, incompatibility, and fragmented programming interface, MPUs have not received wide adoption in real products. Moreover, although the MPU was developed for security purposes, it rarely fulfills its designed functionality and can be easily circumvented in many settings. We showcase concrete attacks to FreeRTOS and RIoT in this regard. Finally, we discussed fundamental causes to explain this situation. We hope our findings can inspire research on novel usage of MPU in microcontrollers","tags":null,"title":"Understanding MPU Usage in Microcontroller-based Systems in the Wild","type":"publication"},{"authors":["Wei Zhou","Zhouqi Jiang","**Le Guan**"],"categories":null,"content":"","date":1670389200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670389200,"objectID":"4fd08221c140a37eef147c2999ee65e3","permalink":"https://guanle.org/publication/mpu/","publishdate":"2022-12-07T00:00:00-05:00","relpermalink":"/publication/mpu/","section":"publication","summary":"As more and more microcontroller-based embedded devices are connected to the Internet, as part of the Internet-of-Things (IoT), previously less tested (and insecure) devices are exposed to miscreants. To prevent them from being compromised, the memory protection unit (MPU), which is readily available on many of these devices, has the potential to enable many defenses. We comprehensively studied the MPU adoption in top operating systems for microcontrollers. Specifically, we investigated whether MPU is supported, how it is used, and whether the claimed security requirement has been effectively achieved by using it. Due to the added complexities and compatibility issues, we found that MPU has not received wide adoption in real products. Moreover, although MPU was developed for security purposes, it rarely fulfills its designed functionality and can be easily circumvented in many settings. We showcase concrete attacks to FreeRTOS and RIoT in this regard. We have reported our findings to the affected parties. Finally, we discuss the root cause of this situation. We hope our findings can inspire research on the novel usage of MPU in microcontrollers.","tags":null,"title":"Good Motive but Bad Design: Pitfalls in MPU Usage in Embedded Systems in the Wild","type":"publication"},{"authors":["Wei Zhou","Lan Zhang","**Le Guan**","Peng Liu","Yuqing Zhang"],"categories":null,"content":"","date":1657598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1657598400,"objectID":"6e4987feb3bc3ae6e42012e59895f53a","permalink":"https://guanle.org/publication/semu/","publishdate":"2022-07-12T00:00:00-04:00","relpermalink":"/publication/semu/","section":"publication","summary":"Emulating firmware of microcontrollers is challenging due to the lack of peripheral models. Existing work finds out how to respond to peripheral read operations by analyzing the target firmware. This is problematic because the firmware sometimes does not contain enough clues to support the emulation or even contains misleading information (e.g., a buggy firmware). In this work, we propose a new approach that builds peripheral models from the peripheral specification. Using NLP, we translate peripheral behaviors in human language (documented in chip manuals) into a set of structured condition-action rules. By checking, executing, and chaining them at runtime, we can dynamically synthesize a peripheral model for each firmware execution. The extracted condition-action rules might not be complete or even be wrong. We, therefore, propose incorporating symbolic execution to quickly pinpoint the root cause. This assists us in the manual correction of the problematic rules. We have implemented our idea for five popular MCU boards spanning three different chip vendors. Using a new edit-distance-based algorithm to calculate trace differences, our evaluation against a large firmware corpus confirmed that our prototype achieves much higher fidelity compared with state-of-the-art solutions. Benefiting from the accurate emulation, our emulator effectively avoids false positives observed in existing fuzzing work. We also designed a new dynamic analysis method to perform driver code compliance checks against the specification. We found some non-compliance which we later confirmed to be bugs caused by race conditions.","tags":null,"title":"What Your Firmware Tells You Is Not How You Should Emulate It: A Speciﬁcation-Guided Approach for Firmware Emulation","type":"publication"},{"authors":["Jiameng Shi","**Le Guan**","Wenqiang Li","Dayou Zhang","Ping Chen","Ning Zhang"],"categories":null,"content":"","date":1642568400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642568400,"objectID":"2ea1a7dedba272d427eab28d984d2778","permalink":"https://guanle.org/publication/harm/","publishdate":"2022-01-19T00:00:00-05:00","relpermalink":"/publication/harm/","section":"publication","summary":"Microcontroller-based embedded systems (MCUs) have become ubiquitous with the emergence of IoT technology. Given its critical roles in many applications, its security is becoming increasingly important. Unfortunately, MCU devices are especially vulnerable. Code reuse attacks are particularly noteworthy since the memory address of firmware code is static. This work seeks to combat code reuse attacks, including ROP and more advanced JIT-ROP via continuous randomization. Previous proposals are geared towards full-fledged OSs with rich runtime environments, and therefore cannot be applied to MCUs. We propose the first solution for ARM-based MCUs leveraging the ARM TrustZone extension. Our system, named HARM, comprises a secure runtime and a binary analysis tool with rewriting module. The secure runtime, protected inside the secure world, proactively triggers and performs non-bypassable randomization to the firmware running in a sandbox in the normal world. Our system does not rely on any firmware feature, and therefore is generally applicable to both baremetal and RTOS-powered firmware. We have implemented a HARM prototype on a real development board. Our evaluation results indicate that the proposed system can effectively thaw code reuse attacks while keeping the performance and energy overhead low.","tags":null,"title":"HARM: Hardware-assisted Continuous Re-randomization for Microcontrollers","type":"publication"},{"authors":["Wenqiang Li","Jiameng Shi","and Fengjun Li","Jingqiang Lin","Wei Wang","**Le Guan**"],"categories":null,"content":"","date":1641013200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641013200,"objectID":"636443d6aad8bfa59d49732a3fa70dd3","permalink":"https://guanle.org/publication/uafl/","publishdate":"2022-01-01T00:00:00-05:00","relpermalink":"/publication/uafl/","section":"publication","summary":"Fuzzing is one of the most effective approaches to find software flaws. However, applying it to microcontroller firmware incurs many challenges. For example, rehosting-based solutions cannot accurately model peripheral behaviors and thus cannot be used to fuzz the corresponding driver code. In this work, we present 𝜇AFL, a hardware-assisted approach to fuzzing firmware on real devices. It leverages debugging tools in existing embedded system development to construct an AFL-compatible fuzzing framework. Specifically, we use the debug dongle to bridge the fuzzing environment on the PC and the target firmware on the microcontroller device. To collect code coverage information without costly code instrumentation, 𝜇AFL relies on the ARM ETM hardware debugging feature, which transparently collects the instruction trace and streams the results to the PC. However, the raw ETM data is obscure and needs enormous computing resources to recover the actual instruction flow. We therefore propose an alternative representation of code coverage, which retains the same path sensitivity as the original AFL algorithm, but can directly work on the raw ETM data without matching them with disassembled instructions. To further reduce the workload, we use the DWT hardware feature to selectively collect runtime information of interest. We evaluated 𝜇AFL on two real evaluation boards from two major vendors: NXP and STMicroelectronics. With our prototype, we discovered ten 0-day bugs in the driver code shipped with the SDK of STMicroelectronics and three 0-day bugs in the SDK of NXP. Considering the wide adoption of chip-vendor-provided SDK code in real products, our results are alarming.","tags":null,"title":"𝜇AFL: Non-intrusive Feedback-driven Fuzzing for Microcontroller Firmware","type":"publication"},{"authors":["Dongliang Fang","Zhanwei Song","**Le Guan**","Puzhuo Liu","Anni Peng","Kai Cheng","Yaowen Zheng","Peng Liu","Hongsong Zhu","Limin Sun"],"categories":null,"content":"","date":1638680400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638680400,"objectID":"62ffc50cbe9cb404c087b8664efd146c","permalink":"https://guanle.org/publication/ics-3-fuzzer/","publishdate":"2021-12-05T00:00:00-05:00","relpermalink":"/publication/ics-3-fuzzer/","section":"publication","summary":"The supervisory software is widely used in industrial control systems (ICSs) to manage field devices such as PLC controllers. Once compromised, it could be misused to control or manipulate these physical devices maliciously, endangering the manufacturing process or even human lives. Therefore, extensive security testing of supervisory software is crucial for the safe operation of ICS. However, fuzzing ICS supervisory software is challenging due to the prevalent use of proprietary protocols. Without the knowledge of the program states and packet formats, it is difficult to enter the deep states for effective fuzzing. In this work, we present a fuzzing framework to automatically discover implementation bugs residing in the communication protocols between the supervisory software and the field devices. To avoid heavy human efforts in reverse-engineering the proprietary protocols, the proposed approach constructs a state-book based on the readily available execution trace of the supervisory software and the corresponding inputs. Then, we propose a state selection algorithm to find the protocol states that are more likely to have bugs. Our fuzzer distributes more budget on those interesting states. To quickly reach the interesting states, the traditional snapshot-based method does not work since the communication protocols are time-sensitive. We address this issue by synchronously managing external events (GUI operations and network traffic) during the fuzzing loop. We have implemented a prototype and used it to fuzz the supervisory software of four popular ICS platforms. We have found 13 bugs and received 3 CVEs, 2 are classified as critical (CVSS3.x score CRITICAL 9.8) and affected 40 different products.","tags":null,"title":"ICS3Fuzzer: A Framework for Discovering Protocol Implementation Bugs in ICS Supervisory Software by Fuzzing","type":"publication"},{"authors":["Wei Zhou","**Le Guan**","Peng Liu","Yuqing Zhang"],"categories":null,"content":"","date":1609477200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609477200,"objectID":"afe1030111f922d04ee786060cbc836e","permalink":"https://guanle.org/publication/uemu/","publishdate":"2021-01-01T00:00:00-05:00","relpermalink":"/publication/uemu/","section":"publication","summary":" Emulating firmware for microcontrollers is challenging due to the tight coupling between the hardware and firmware. This has greatly impeded the application of dynamic analysis tools to firmware analysis. The state-of-the-art work automatically models unknown peripherals by observing their access patterns, and then leverages heuristics to calculate the appropriate responses when unknown peripheral registers are accessed. However, we empirically found that this approach and the corresponding heuristics are frequently insufficient to emulate firmware. In this work, we propose a new approach called  uEMU to emulate firmware with unknown peripherals. Unlike existing work that attempts to build a general model for each peripheral, our approach learns how to correctly emulate firmware execution at individual peripheral access points. It takes the image as input and symbolically executes it by representing unknown peripheral registers as symbols. During symbolic execution, it infers the rules to respond to unknown peripheral accesses. These rules are stored in a knowledge base, which is referred to during the dynamic firmware analysis. uEMU achieved a passing rate of 93% in a set of unit tests for peripheral drivers without any manual assistance. We also evaluated uEMU with real-world firmware samples and new bugs were discovered. ","tags":null,"title":"Automatic Firmware Emulation through Invalidity-guided Knowledge Inference","type":"publication"},{"authors":["Wenqiang Li","**Le Guan**","Jingqiang Lin","Jiameng Shi","Fengjun Li"],"categories":null,"content":"","date":1609477200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609477200,"objectID":"534f88b86fe9ea3d8b155682d6721304","permalink":"https://guanle.org/publication/rehosting/","publishdate":"2021-01-01T00:00:00-05:00","relpermalink":"/publication/rehosting/","section":"publication","summary":"Finding  bugs  in  microcontroller  (MCU)  firmwareis   challenging,   even   for   device   manufacturers   who   own   thesource  code.  The  MCU  runs  different  instruction  sets  than  x86and  exposes  a  very  different  development  environment.  Thisinvalidates  many  existing  sophisticated  software  testing  tools  onx86.  To  maintain  a  unified  developing  and  testing  environment,a  straightforward  way  is  to  re-compile  the  source  code  into  thenative  executable  for  a  commodity  machine  (called  rehosting).However,  ad-hoc re-hosting  is  a  daunting  and  tedious  task  and subject  to  many  issues  (library-dependence,  kernel-dependenceand  hardware-dependence).  In  this  work,  we  systematically  ex-plore the portability problem of MCU software and propose para-rehosting to ease the porting process. Specifically, we abstract andimplement a portable MCU (PMCU) using the POSIX interface. It  models  common  functions  of  the  MCU  cores.  For  peripheralspecific  logic,  we  propose  HAL-based  peripheral  function  re-placement,  in  which  high-level  hardware  functions  are  replacedwith  an  equivalent  backend  driver  on  the  host.  These  backenddrivers are invoked by well-designed para-APIs and can be reusedacross  many  MCU  OSs.  We  categorize  common  HAL  functionsinto  four  types  and  implement  templates  for  quick  backenddevelopment. Using the proposed approach, we have successfully rehosted  nine  MCU  OSs  including  the  widely  deployed  AmazonFreeRTOS, ARM Mbed OS, Zephyr and LiteOS. To demonstratethe  superiority  of  our  approach  in  terms  of  security  testing,  weused off-the-shelf dynamic analysis tools (AFL and ASAN) againstthe  rehosted  programs  and  discovered  24  previously-unknownbugs,  among  which  5  were  confirmed  by  CVE  and  others  wereconfirmed  by  vendors.","tags":null,"title":"From Library Portability to Para-rehosting: Natively Executing Open-source Microcontroller OSs on Commodity Hardware","type":"publication"},{"authors":["Wei Zhou","Chen Cao","Dongdong Huo","Kai Cheng","Lan Zhang","**Le Guan**","Tao Liu","Yan Jia","Yaowen Zheng","Yuqing Zhang","Limin Sun","Yazhe Wang","Peng Liu"],"categories":null,"content":"","date":1609477200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609477200,"objectID":"5b8507ad82d90dc7e873984056f6e0d2","permalink":"https://guanle.org/publication/logicbugs/","publishdate":"2021-01-01T00:00:00-05:00","relpermalink":"/publication/logicbugs/","section":"publication","summary":" In  recent  years,  IoT  platforms  and  systems  have been   rapidly   emerging.   Although   IoT   is   a   new   technology, new  does  not  mean  simpler  (than  existing  networked  systems). Contrarily,  the  complexity  (of  IoT  platforms  and  systems)  is actually  being  increased  in  terms  of  the  interactions  between the  physical  world  and  cyberspace.  The  increased  complexity indeed results in new vulnerabilities. This paper seeks to provide a  review  of  the  recently  discovered  logic  bugs  that  are  specific to IoT platforms and systems and discuss the lessons we learned from  these  bugs.  In  particular,  20  logic  bugs  and  one  weakness falling into seven categories of vulnerabilities are reviewed in this survey. ","tags":null,"title":"Reviewing IoT Security via Logic Bugs in IoT Platforms and Systems","type":"publication"},{"authors":["Chen Cao*","**Le Guan***","Jiang Ming","Peng Liu"],"categories":null,"content":"","date":1607490000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607490000,"objectID":"cccff9657ff16fffaa05def34e60be4c","permalink":"https://guanle.org/publication/laelaps/","publishdate":"2020-12-09T00:00:00-05:00","relpermalink":"/publication/laelaps/","section":"publication","summary":"With the rapid proliferation of IoT devices, our cyberspace is nowadays dominated by billions of low-cost computing nodes, which are very heterogeneous to each other. Dynamic analysis, one of the most effective approaches to finding software bugs, has become paralyzed due to the lack of a generic emulator capable of running diverse previously-unseen firmware. In recent years, we have witnessed devastating security breaches targeting low-end microcontroller-based IoT devices. These security concerns have significantly hamstrung further evolution of the IoT technology. In this work, we present Laelaps, a device emulator specifically designed to run diverse software of microcontroller devices. We do not encode into our emulator any specific information about a device. Instead, Laelaps infers the expected behavior of firmware via symbolic-execution-assisted peripheral emulation and generates proper inputs to steer concrete execution on the fly. This unique design feature makes Laelaps capable of running diverse firmware with no a priori knowledge about the target device. To demonstrate the capabilities of Laelaps, we applied dynamic analysis techniques on top of our emulator. We successfully identified both self-injected and real-world vulnerabilities. ","tags":["symbolic execution","microcontroller","firmware emulation"],"title":"Device-Agnostic Firmware Execution is Possible: A Concolic Execution Approach for Peripheral Emulation","type":"publication"},{"authors":["J. Ye","L. Guo","B. Yang","F. Li","L. Du","**L. Guan**","W. Song"],"categories":null,"content":"","date":1606798800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606798800,"objectID":"7810a7f7ed5de6b0c45abebd6495e0aa","permalink":"https://guanle.org/publication/electricvehiclesreview/","publishdate":"2020-12-01T00:00:00-05:00","relpermalink":"/publication/electricvehiclesreview/","section":"publication","summary":"Power electronics systems have become increasingly vulnerable to cyber-physical threats due to their growing penetration in Internet of Things (IoT) enabled applications, including connected electric vehicles (EVs). In response to this emerging need, a cyber-physical-security initiative was recently launched by the IEEE power electronics society (PELS). With increasing connectivity due to Vehicle-to-everything (V2X) and the number of electronic control units, connected electric vehicles are facing greater cyber-physical security challenges. However, existing research extensively focuses on the network security of internal combustion engine vehicles and fails to address the cyber-physical security of EVs specifically. In this paper, the challenges and future visions of cyber-physical security are discussed for connected electric vehicles from the perspective of firmware security, vehicle charging safety, and powertrain control security. The vulnerabilities of EVs are investigated under a variety of cyber-attacks, ranging from energy-efficiency-motivated attacks to safety-motivated attacks. Simulation results, including hardware-in-the-loop (HIL) results, are provided to further analyze the cyber-attack impacts on both converter (device) and vehicle (system) levels. More importantly, an architecture for the next-generation power electronics systems is proposed to address the cyber-physical security challenges of EVs. Finally, potential research opportunities are discussed in detail, including detection and migration for firmware security, model-based, and data-driven detection and mitigation. To the best of our knowledge, this is the first comprehensive study on cyber-physical security of powertrain systems in modern EVs.","tags":null,"title":"Cyber-Physical Security of Powertrain Systems in Modern Electric Vehicles: Vulnerabilities, Challenges and Future Visions","type":"publication"},{"authors":["L. Guo","B. Yang","J. Ye","H. Chen","F. Li","W. Song","L. Du","**L. Guan**"],"categories":null,"content":"","date":1595563200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595563200,"objectID":"d2ad630abe9160f9a50c8f7f43e14e24","permalink":"https://guanle.org/publication/electricvehicles/","publishdate":"2020-07-24T00:00:00-04:00","relpermalink":"/publication/electricvehicles/","section":"publication","summary":"In this paper, a systematic assessment of cyber-physical security on the energy management system for connected and automated electric vehicles is proposed, which, to our knowledge, has not been attempted before. The generalized methodology of impact analysis of cyber-attacks is developed, including novel evaluation metrics from the perspectives of steady-state and transient performance of the energy management system and innovative index-based resilience and security criteria. Specifically, we propose a security criterion in terms of dynamic performance, comfortability, and energy, which are the most critical metrics to evaluate the performance of an electronic control unit (ECU). If an attack does not impact these metrics, it perhaps can be negligible. Based on the statistical results and the proposed evaluation metrics, the impact of cyber-attacks on ECU is analyzed comprehensively. The conclusions can serve as guidelines for attack detection, diagnosis, and countermeasures.","tags":null,"title":"Systematic Assessment of Cyber-physical Security of Energy Management System for Connected and Automated Electric Vehicles","type":"publication"},{"authors":["Fangjie Jiang","Quanwei Cai","Jingqiang Lin","Bo Luo","**Le Guan**","Ziqiang Ma"],"categories":null,"content":"","date":1575936000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575936000,"objectID":"a7dd758bd9d4ec63c3718c4ddce8e790","permalink":"https://guanle.org/publication/acsac-2019/","publishdate":"2019-09-08T22:24:46.868052Z","relpermalink":"/publication/acsac-2019/","section":"publication","summary":"","tags":null,"title":"TF-BIV: Transparent and Fine-grained Binary Integrity Verification in the Cloud","type":"publication"},{"authors":["Dawei Chu","Kaijie Zhu","Quanwei Cai","Jingqiang Lin","Fengjun Li","**Le Guan**","Lingchen Zhang"],"categories":null,"content":"","date":1575849600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575849600,"objectID":"06baaa010d1aeb078b9e04de3740f42c","permalink":"https://guanle.org/publication/globecom-2019/","publishdate":"2019-07-26T02:55:00.299235Z","relpermalink":"/publication/globecom-2019/","section":"publication","summary":"","tags":null,"title":"Secure Cryptography Infrastructures in the Clouds","type":"publication"},{"authors":["Wei Zhou","Yan Jia","Yao Yao","Lipeng Zhu","**Le Guan**","Yuhang Mao","Peng Liu","Yuqing Zhang"],"categories":null,"content":"","date":1565740800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565740800,"objectID":"c6d4bd3732e50b3ac9d922c2dd2d2d11","permalink":"https://guanle.org/publication/phantom/","publishdate":"2019-05-27T19:20:50.481699Z","relpermalink":"/publication/phantom/","section":"publication","summary":"A smart home connects tens of home devices to the Internet, where an IoT cloud runs various home automation applications. While bringing unprecedented convenience and accessibility, it also introduces various security hazards to users. Prior research studied smart home security from several aspects. However, we found that the complexity of the interactions among the participating entities (i.e., devices, IoT clouds, and mobile apps) has not yet been systematically investigated. In this work, we conducted an in-depth analysis of five widely-used smart home platforms. Combining firmware analysis, network traffic interception, and blackbox testing, we reverse-engineered the details of the interactions among the participating entities. Based on the details, we inferred three legitimate state transition diagrams for the three entities, respectively. Using these state machines as a reference model, we identified a set of unexpected state transitions. To confirm and trigger the unexpected state transitions, we implemented a set of phantom devices to mimic a real device. By instructing the phantom devices to intervene in the normal entity-entity interactions, we have discovered several new vulnerabilities and a spectrum of attacks against real-world smart home platforms.","tags":null,"title":"Discovering and Understanding the Security Hazards in the Interactions between IoT Devices, Mobile Apps, and Clouds on Smart Home Platforms","type":"publication"},{"authors":["Congwu Li","**Le Guan**","Jingqiang Lin","Bo Luo","Quanwei Cai","Jiwu Jing","Jing Wang"],"categories":null,"content":"","date":1546318800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546318800,"objectID":"24e9050dfb285bc787ce317250df8bb6","permalink":"https://guanle.org/publication/mimosa-j/","publishdate":"2019-01-01T00:00:00-05:00","relpermalink":"/publication/mimosa-j/","section":"publication","summary":"Cryptography is essential for computer and network security. In practice, the cryptographic keys are loaded into the memory as plaintext during cryptographic computations. Therefore, the keys are subject to memory disclosure attacks that read unauthorized data from RAM. This paper presents Mimosa, protecting RSA private keys against both software-based and physical memory disclosure attacks. Mimosa uses hardware transactional memory (HTM) to ensure that (a) whenever a malicious process attempts to read the plaintext private key, the transaction aborts and all sensitive data are automatically cleared, due to the atomicity guarantee of HTM; and (b) all sensitive data appear as plaintext only within caches, and are never loaded to RAM chips. To the best of our knowledge, Mimosa is the first to use transactional memory to protect sensitive data against memory attacks. We implemented Mimosa with Intel TSX. However, the fragility of TSX transactions introduces extra cache-clogging denial-of-service (DoS) threats, and attackers could sharply degrade the performance. We further partition an RSA private-key computation into multiple transactional parts, while (sensitive) intermediate results are protected across transactional parts. Experiments show that Mimosa effectively protects cryptographic keys against memory disclosure attacks, and introduces a small overhead, even with concurrent cache-clogging workloads.","tags":["Random access memory;Cryptography;Registers;Kernel;Hardware;Cold-Boot Attack;CPU-Bound Encryption;DMA Attack;Memory Disclosure Attack;Transactional Memory"],"title":"Mimosa: Protecting Private Keys against Memory Disclosure Attacks using Hardware Transactional Memory","type":"publication"},{"authors":["Lingyun Situ","Linzhang Wang","Xuandong Li","**Le Guan**","Wenhui Zhang","Peng Liu"],"categories":null,"content":"","date":1546318800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546318800,"objectID":"1faf3fd8c3136d6dc615f755e2689f24","permalink":"https://guanle.org/publication/fuzzingenergydistribution/","publishdate":"2019-01-01T00:00:00-05:00","relpermalink":"/publication/fuzzingenergydistribution/","section":"publication","summary":"Existing energy distribution strategies of AFL and its variants have two limitations. (1) They focus on increasing coverage but ignore the fact that some code regions are more likely to be vulnerable. (2) They randomly select mutators and deterministically specify the number to mutator, therefore lack insights regarding which granularity of mutators are more helpful at that particular stage. We improve the two limitations of AFL’s fuzzing energy distribution in a principled way. We direct the fuzzer to strengthen fuzzing toward regions that have a higher probability to contain vulnerabilities based on static semantic metrics of the target program. Furthermore, granularity-aware scheduling of mutators is proposed, which dynamically assigns ratios to different mutation operators. We implemented these improvements as an extension to AFL. Large-scale experimental evaluations showed the effectiveness of each improvement and performance of integration. The proposed tool has helped us find 12 new bugs and expose three new CVEs.","tags":null,"title":"Poster: Energy Distribution Matters in Greybox Fuzzing","type":"publication"},{"authors":["**Le Guan**","Chen Cao","Sencun Zhu","Jingqiang Lin","Peng Liu","Yubin Xia","Bo Luo"],"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"fae2f3af6010d06af02b0651ec30ad25","permalink":"https://guanle.org/publication/mem-vault/","publishdate":"2019-07-26T02:55:00.298351Z","relpermalink":"/publication/mem-vault/","section":"publication","summary":" Sensitive data in a process could be scattered over the memory of a computer system for a prolonged period of time. Unfortunately, DRAM chips were proven insecure in previous studies. The problem becomes worse in the mobile environment, in which users' smartphones are easily lost or stolen. The powered-on phones may contain sensitive data in the vulnerable DRAM chips. In this paper, we propose MemVault, a mechanism to protect sensitive data in Android devices against physical memory attacks. MemVault keeps track of the propagation of well-marked sensitive data sources, and selectively encrypts tainted sensitive memory contents in the DRAM chip. When a tainted object is accessed, MemVault redirects the access to the internal RAM (iRAM), where the cipher-text object is decrypted transparently. iRAM is a system-on-chip (SoC) component which is by nature immune to physical memory exploits. We have implemented a MemVault prototype system, and have evaluated it with extensive experiments. Our results validate that MemVault effectively eliminates the occurrences of clear-text sensitive objects in DRAM chips, and imposes acceptable overheads.","tags":null,"title":"Protecting Mobile Devices from Physical Memory Attacks with Targeted Encryption","type":"publication"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;\n","date":1536465600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536465600,"objectID":"6a451186c775f5f0adb3a0416d0cb711","permalink":"https://guanle.org/tutorial/example/","publishdate":"2018-09-09T00:00:00-04:00","relpermalink":"/tutorial/example/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;","tags":null,"title":"Example Page","type":"docs"},{"authors":["**L. Guan**","J. Lin","Z. Ma","B. Luo","L. Xia","J. Jing"],"categories":null,"content":"","date":1535760000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535760000,"objectID":"4d2b8e5d24a35ccaff73b03e7a77a10a","permalink":"https://guanle.org/publication/coper-tdsc/","publishdate":"2019-09-08T22:24:46.866155Z","relpermalink":"/publication/coper-tdsc/","section":"publication","summary":"Cryptosystems are essential for computer and communication security, e.g., RSA or ECDSA in PGP Email clients and AES in full disk encryption. In practice, the cryptographic keys are loaded and stored in RAM as plain-text, and therefore vulnerable to cold-boot attacks exploiting the remanence effect of RAM chips to directly read memory data. To tackle this problem, we proposeCopker, a cryptographic engine that implements asymmetric cryptosystems entirely within the CPU, without storing any plain-text sensitive data in RAM. Copker supports the popular asymmetric cryptosystems (i.e., RSA and ECDSA), and deterministic random bit generators (DRBGs) used in ECDSA signing. In its active mode, Copker stores kilobytes of sensitive data, including the private key, the DRBG seed and intermediate states, only in on-chip CPU caches (and registers). Decryption/signing operations are performed without storing any sensitive information in RAM. In the suspend mode, Copker stores symmetrically-encrypted private keys and DRBG seeds in memory, while employs existing solutions to keep the key-encryption key securely in CPU registers. Hence, Copker releases the system resources in the suspend mode. We implement Copker with the support of multiple private keys. With security analyses and intensive experiments, we demonstrate that Copker provides cryptographic services that are secure against cold-boot attacks and introduce reasonable overhead.","tags":["Random access memory;Cryptography;Registers;Computers;Cathode ray tubes;Kernel;Cache-as-RAM;cold-boot attack;public-key cryptography implementation;deterministic random bit generator"],"title":"Copker: A Cryptographic Engine Against Cold-Boot Attacks","type":"publication"},{"authors":["**Le Guan**","Chen Cao","Peng Liu","Xinyu Xing","Xinyang Ge","Shengzhi Zhang","Meng Yu","Trent Jaeger"],"categories":null,"content":"","date":1530417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530417600,"objectID":"880ba237bddcb2c45c69ed17bcd446a2","permalink":"https://guanle.org/publication/ts-tdsc/","publishdate":"2018-07-01T00:00:00-04:00","relpermalink":"/publication/ts-tdsc/","section":"publication","summary":"The rapid evolution of Internet-of-Things (IoT) technologies has led to an emerging need to make them smarter. However, the smartness comes at the cost of multi-vector security exploits. From cyber space, a compromised operating system could access all the data in a cloud-aware IoT device. From physical space, cold-boot attacks and DMA attacks impose a great threat to the unattended devices.","tags":["Runtime;Encryption;Hardware;Virtual machine monitors;Linux;Malicious Operating Systems;ARM TrustZone;TEE;IoT;Physical Attack;Cold-boot Attack"],"title":"Building a Trustworthy Execution Environment to Defeat Exploits from both Cyber Space and Physical Space for ARM","type":"publication"},{"authors":["Le Guan","Sadegh Farhang","Yu Pu","Pinyao Guo","Jens Grossklags","Peng Liu"],"categories":null,"content":"","date":1525132800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525132800,"objectID":"7ba78edfa651cf5926a9bff7c18d8dc9","permalink":"https://guanle.org/publication/vault-ime-journal/","publishdate":"2019-07-26T02:55:00.296727Z","relpermalink":"/publication/vault-ime-journal/","section":"publication","summary":"","tags":["Password manager","Auto-correction","IME","Usable security"],"title":"VaultIME: Regaining User Control for Password Managers through Auto-correction","type":"publication"},{"authors":["Chen Cao","**Le Guan**","Ning Zhang","Neng Gao","Jingqiang Lin","Bo Luo","Peng Liu","Ji Xiang","Wenjing Lou"],"categories":null,"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"1117fa424bab39cf5861b1460ff17a11","permalink":"https://guanle.org/publication/crypt-me/","publishdate":"2019-09-08T22:24:46.866929Z","relpermalink":"/publication/crypt-me/","section":"publication","summary":"Sensitive data (e.g.,passwords, health data and private videos) can be leaked due to many reasons, including (1) the misuse of legitimate operating system (OS) functions such as core dump, swap and hibernation, and (2) physical attacks to the DRAM chip such as cold-boot attacks and DMA attacks. While existing software-based memory encryption is effective in defeating physical attacks, none of them can prevent a legitimate OS function from accidentally leaking sensitive data in the memory. This paper introduces CryptMe that integrates memory encryption and ARM TrustZone-based memory access controls to protect sensitive data against both attacks. CryptMe essentially extends the Linux kernel with the ability to accommodate the execution of unmodified programs in an isolated execution domain (to defeat OS function misuse), and at the same time transparently encrypt sensitive data appeared in the DRAM chip (to defeat physical attacks). We have conducted extensive experiments on our prototype implementation. The evaluation results show the efficiency and added security of our design.","tags":null,"title":"CryptMe: Data Leakage Prevention for Unmodified Programs on ARM Devices","type":"publication"},{"authors":["Fangjie Jiang","Quanwei Cai","**Le Guan**","Jingqiang Lin"],"categories":null,"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"6f1b25162d7dff84fe97436b958bc3e4","permalink":"https://guanle.org/publication/en-acci/","publishdate":"2019-09-08T22:24:46.867351Z","relpermalink":"/publication/en-acci/","section":"publication","summary":"Most cloud providers afford their tenants with cryptographic services that greatly escalate the protection of users' private keys. Isolated from the guest operating systems (OSes), the keys are kept confidential even if the OS kernel is compromised. However, existing cryptographic services are ineffective in the access control of these critical services. In particular, they enforce controls for the key accesses mainly based on non-cryptographic authentication/authorization information (i.e., the identity and the password). Some platforms leverage other information such as the resource identification of the Virtual machine (VM) (e.g., IP address). Therefore, once the password is leaked, the attacker could invoke the cryptographic service in the victim VM. Moreover, sophisticated attackers can exploit vulnerabilities in the guest OS kernel and stealthily invoke cryptographic services. In this paper, we propose a new scheme named En-ACCI to improve the security of cryptographic service invocation in the cloud and achieve better access controls as well as auditing by leveraging the rich VM context provided by virtual machine introspection (VMI). To the best of our knowledge, we are the first in the literature to discuss these security issues involved in the invocation of cryptographic services in the cloud. We address the challenges by using an access control mechanism atop a set of optimization to VMI. We have implemented a prototype of En-ACCI, and our evaluation demonstrates that En-ACCI effectively addresses the authorization and audit issues in the cloud-based cryptographic service and the introduced performance overhead is modest.","tags":null,"title":"Enforcing Access Controls for the Cryptographic Cloud Service Invocation Based on Virtual Machine Introspection","type":"publication"},{"authors":[],"categories":null,"content":"Click on the **Slides** button above to view the built-in slides feature.  Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1483246800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483246800,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://guanle.org/talk/example/","publishdate":"2017-01-01T00:00:00-05:00","relpermalink":"/talk/example/","section":"talk","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["**Le Guan**","Shijie Jia","Bo Chen","Fengwei Zhang","Bo Luo","Jingqiang Lin","Peng Liu","Xinyu Xing","Luning Xia"],"categories":null,"content":"","date":1483246800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483246800,"objectID":"9f97abc97264a8e29da7ffa114a0ea40","permalink":"https://guanle.org/publication/bolt/","publishdate":"2017-01-01T00:00:00-05:00","relpermalink":"/publication/bolt/","section":"publication","summary":"The increasing growth of cybercrimes targeting mobile devices urges an efficient malware analysis platform. With the emergence of evasive malware, which is capable of detecting that it is being analyzed in virtualized environments, bare-metal analysis has become the definitive resort. Existing works mainly focus on extracting the malicious behaviors exposed during bare-metal analysis. However, after malware analysis, it is equally important to quickly restore the system to a clean state to examine the next sample. Unfortunately, state-of-the-art solutions on mobile platforms can only restore the disk, and require a time-consuming system reboot. In addition, all of the existing works require some in-guest components to assist the restoration. Therefore, a kernel-level malware is still able to detect the presence of the in-guest components.We propose Bolt, a transparent restoration mechanism for bare-metal analysis on mobile platform without rebooting. Bolt achieves a reboot-less restoration by simultaneously making a snapshot for both the physical memory and the disk. Memory snapshot is enabled by an isolated operating system (BoltOS) in the ARM TrustZone secure world, and disk snapshot is accomplished by a piece of customized firmware (BoltFTL) for flash-based block devices. Because both the BoltOS and the BoltFTL are isolated from the guest system, even kernel-level malware cannot interfere with the restoration. More importantly, Bolt does not require any modifications into the guest system. As such, Bolt is the first restoration mechanism for bare-metal malware analysis that simultaneously achieves efficiency, isolation, and stealthiness. We have implemented a Bolt prototype working with the Android OS. Experimental results show that Bolt can restore the guest system to the clean state in only 2.80 seconds.","tags":["Bare-metal Analysis","Evasive Malware","Flash-based Block Device","Snapshot"],"title":"Supporting Transparent Snapshot for Bare-metal Malware Analysis on Mobile Devices","type":"publication"},{"authors":["**Le Guan**","Peng Liu","Xinyu Xing","Xinyang Ge","Shengzhi Zhang","Meng Yu","Trent Jaeger"],"categories":null,"content":"","date":1483246800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483246800,"objectID":"e82ba87fdaf49b0044f450e6835d4bb0","permalink":"https://guanle.org/publication/trustshadow/","publishdate":"2017-01-01T00:00:00-05:00","relpermalink":"/publication/trustshadow/","section":"publication","summary":"The rapid evolution of Internet-of-Things (IoT) technologies has led to an emerging need to make them smarter. A variety of applications now run simultaneously on an ARM-based processor. For example, devices on the edge of the Internet are provided with higher horsepower to be entrusted with storing, processing and analyzing data collected from IoT devices. This significantly improves efficiency and reduces the amount of data that needs to be transported to the cloud for data processing, analysis and storage. However, commodity OSes are prone to compromise. Once they are exploited, attackers can access the data on these devices. Since the data stored and processed on the devices can be sensitive, left untackled, this is particularly disconcerting. In this paper, we propose a new system, TrustShadow that shields legacy applications from untrusted OSes. TrustShadow takes advantage of ARM TrustZone technology and partitions resources into the secure and normal worlds. In the secure world, TrustShadow constructs a trusted execution environment for security-critical applications. This trusted environment is maintained by a lightweight runtime system that coordinates the communication between applications and the ordinary OS running in the normal world. The runtime system does not provide system services itself. Rather, it forwards requests for system services to the ordinary OS, and verifies the correctness of the responses. To demonstrate the efficiency of this design, we prototyped TrustShadow on a real chip board with ARM TrustZone support, and evaluated its performance using both microbenchmarks and real-world applications. We showed TrustShadow introduces only negligible overhead to real-world applications.","tags":null,"title":"TrustShadow: Secure Execution of Unmodified Applications with ARM TrustZone","type":"publication"},{"authors":["Pinyao Guo","Hunmin Kim","**Le Guan**","Minghui Zhu","Peng Liu"],"categories":null,"content":"","date":1483246800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483246800,"objectID":"5a86982f2c95b1ee16beabddfe6bd214","permalink":"https://guanle.org/publication/vcids/","publishdate":"2017-01-01T00:00:00-05:00","relpermalink":"/publication/vcids/","section":"publication","summary":"","tags":null,"title":"VCIDS: Collaborative Intrusion Detection of Sensor and Actuator Attacks on Connected Vehicles","type":"publication"},{"authors":["Pinyao Guo","Hunmin Kim","Le Guan","Minghui Zhu","Peng Liu"],"categories":null,"content":"","date":1483246800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483246800,"objectID":"42586e439792b33d2f24673c2ec9bf36","permalink":"https://guanle.org/publication/vcids/","publishdate":"2017-01-01T00:00:00-05:00","relpermalink":"/publication/vcids/","section":"publication","summary":"","tags":null,"title":"VCIDS: Collaborative Intrusion Detection of Sensor and Actuator Attacks on Connected Vehicles","type":"publication"},{"authors":["Le Guan","Sadegh Farhang","Yu Pu","Pinyao Guo","Jens Grossklags","Peng Liu"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"88dd44575dc02f1a59a8a4e0bb620ec7","permalink":"https://guanle.org/publication/vault-ime/","publishdate":"2019-07-26T02:55:00.296138Z","relpermalink":"/publication/vault-ime/","section":"publication","summary":"Users are often educated to follow different forms of advice from security experts. For example, using a password manager is considered an effective way to maintain a unique and strong password for every important website. However, user surveys reveal that most users are not willing to adopt this tool. They feel uncomfortable or even threatened, when they grant password managers the privilege to automate access to their digital accounts. Likewise, they are worried that individuals close to them may be able to access important websites by using the password manager stealthily.   We propose VaultIME to nudge more users towards the adoption of password managers by offering them a tangible benefit with minimal interference with their current usage practices. Instead of \"auto-filling\" password fields, we propose a new mechanism to \"auto-correct\" passwords in the presence of minor typos. VaultIME innovates by integrating the functionality of a password manager into an input method editor. Specifically, running as an app on mobile phones, VaultIME remembers user passwords on a per-app basis, and corrects mistyped passwords within a typo-tolerant set. We show that VaultIME achieves high levels of usability and security. With respect to usability, VaultIME is able to correct as many as 47.8% of password typos in a real-world password typing dataset. Regarding security, simulated attacks reveal that the security loss brought by VaultIME against a brute-force attacker is at most 0.43%.","tags":null,"title":"VaultIME: Regaining User Control For Password Managers through Auto-correction","type":"publication"},{"authors":["Jingqiang Lin","Bo Luo","**Le Guan**","Jiwu Jing"],"categories":null,"content":"","date":1477972800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1477972800,"objectID":"04f46cd7268cb1f3feae6bb71c9a1b85","permalink":"https://guanle.org/publication/7782711/","publishdate":"2016-11-01T00:00:00-04:00","relpermalink":"/publication/7782711/","section":"publication","summary":"","tags":null,"title":"Secure Computing Using Registers and Caches: The Problem, Challenges, and Solutions","type":"publication"},{"authors":null,"categories":null,"content":"","date":1461729600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461729600,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://guanle.org/project/external-project/","publishdate":"2016-04-27T00:00:00-04:00","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461729600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461729600,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://guanle.org/project/internal-project/","publishdate":"2016-04-27T00:00:00-04:00","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":[],"categories":null,"content":" Academic makes it easy to create a beautiful website for free using Markdown. Customize anything on your site with widgets, themes, and language packs.\nFollow our easy step by step guide to learn how to build your own free website with Academic. Check out the personal demo or the business demo of what you\u0026rsquo;ll get in less than 10 minutes.\n View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.\n         Ecosystem Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site\nInstall You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Quick install using your web browser  Install Academic with Netlify  Netlify will provide you with a customizable URL to access your new site  On GitHub, go to your newly created academic-kickstart repository and edit config.toml to personalize your site. Shortly after saving the file, your site will automatically update Read the Quick Start Guide to learn how to add Markdown content. For inspiration, refer to the Markdown content which powers the Demo  Install with Git Prerequisites:\n Download and install Git Download and install Hugo   Fork the Academic Kickstart repository and clone your fork with Git:\ngit clone https://github.com/sourcethemes/academic-kickstart.git My_Website  Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace sourcethemes with your GitHub username.\n Initialize the theme:\ncd My_Website git submodule update --init --recursive   Install with ZIP  Download and extract Academic Kickstart Download and extract the Academic theme to the themes/academic/ folder from the above step  Install with RStudio View the guide to installing Academic with RStudio\nQuick start  If you installed on your computer, view your new website by running the following command:\nhugo server  Now visit localhost:1313 and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.\n Read the Quick Start Guide to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the Markdown content which powers the Demo\n Build your site by running the hugo command. Then host it for free using Github Pages or Netlify (refer to the first installation method). Alternatively, copy the generated public/ directory (by FTP, Rsync, etc.) to your production web server (such as a university\u0026rsquo;s hosting service).\n  Updating Feel free to star the project on Github to help keep track of updates and check out the release notes prior to updating your site.\nBefore updating the framework, it is recommended to make a backup of your entire website directory (or at least your themes/academic directory) and record your current version number.\nBy default, Academic is installed as a Git submodule which can be updated by running the following command:\ngit submodule update --remote --merge  Check out the update guide for full instructions and alternative methods.\nFeedback \u0026amp; Contributing Please use the issue tracker to let me know about any bugs or feature requests, or alternatively make a pull request.\nFor support, head over to the Hugo discussion forum.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461124800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515819600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://guanle.org/post/getting-started/","publishdate":"2016-04-20T00:00:00-04:00","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website or blog in under 10 minutes.","tags":["Academic"],"title":"Academic: the website designer for Hugo","type":"post"},{"authors":["**Le Guan**","Jun Xu","Shuai Wang","Xinyu Xing","Lin Lin","Heqing Huang","Peng Liu","Wenke Lee"],"categories":null,"content":"","date":1451624400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451624400,"objectID":"abf6e78a011f870f06700c3767e7564c","permalink":"https://guanle.org/publication/insurance/","publishdate":"2016-01-01T00:00:00-05:00","relpermalink":"/publication/insurance/","section":"publication","summary":"Nowadays, auto insurance companies set personalized insurance rate based on data gathered directly from their customers' cars. In this paper, we show such a personalized insurance mechanism -- wildly adopted by many auto insurance companies -- is vulnerable to exploit. In particular, we demonstrate that an adversary can leverage off-the-shelf hardware to manipulate the data to the device that collects drivers' habits for insurance rate customization and obtain a fraudulent insurance discount. In response to this type of attack, we also propose a defense mechanism that escalates the protection for insurers' data collection. The main idea of this mechanism is to augment the insurer's data collection device with the ability to gather unforgeable data acquired from the physical world, and then leverage these data to identify manipulated data points. Our defense mechanism leveraged a statistical model built on unmanipulated data and is robust to manipulation methods that are not foreseen previously. We have implemented this defense mechanism as a proof-of-concept prototype and tested its effectiveness in the real world. Our evaluation shows that our defense mechanism exhibits a false positive rate of 0.032 and a false negative rate of 0.013.","tags":null,"title":"From Physical to Cyber: Escalating Protection for Personalized Auto Insurance","type":"publication"},{"authors":["**Le Guan**","Jingqiang Lin","Bo Luo","Jiwu Jing","Jing Wang"],"categories":null,"content":"","date":1420088400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1420088400,"objectID":"6a73b1f3fd23074c29fef3df07aca938","permalink":"https://guanle.org/publication/mimosa/","publishdate":"2015-01-01T00:00:00-05:00","relpermalink":"/publication/mimosa/","section":"publication","summary":"Cryptography plays an important role in computer and communication security. In practical implementations of cryptosystems, the cryptographic keys are usually loaded into the memory as plaintext, and then used in the cryptographic algorithms. Therefore, the private keys are subject to memory disclosure attacks that read unauthorized data from RAM. Such attacks could be performed through software methods (e.g., OpenSSL Heartbleed) even when the integrity of the victim system’s executable binaries is maintained. They could also be performed through physical methods (e.g., cold-boot attacks on RAM chips) even when the system is free of software vulnerabilities. In this paper, we propose Mimosa that protects RSA private keys against the above software-based and physical memory attacks. When the Mimosa service is in idle, private keys are encrypted and reside in memory as ciphertext. During the cryptographic computing, Mimosa uses hardware transactional memory (HTM) to ensure that (a) whenever a malicious process other than Mimosa attempts to read the plaintext private key, the transaction aborts and all sensitive data are automatically cleared with hardware mechanisms, due to the strong atomicity guarantee of HTM; and (b) all sensitive data, including private keys and intermediate states, appear as plaintext only within CPU-bound caches, and are never loaded to RAM chips. To the best of our knowledge, Mimosa is the first solution to use transactional memory to protect sensitive data against memory disclosure attacks. We have implemented Mimosa on a commodity machine with Intel Core i7 Haswell CPUs. Through extensive experiments, we show that Mimosa effectively protects cryptographic keys against various attacks that attempt to read sensitive data from memory, and it only introduces a small performance overhead.","tags":null,"title":"Protecting private keys against memory disclosure attacks using hardware transactional memory","type":"publication"},{"authors":["**Le Guan**","Fengjun Li","Jiwu Jing","Jing Wang","Ziqiang Ma"],"categories":null,"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1420070400,"objectID":"eaed39f38e83c73b54d9557d01e499f7","permalink":"https://guanle.org/publication/guan-2015/","publishdate":"2019-09-08T22:35:01.26567Z","relpermalink":"/publication/guan-2015/","section":"publication","summary":"","tags":null,"title":"virtio-ct: A Secure Cryptographic Token Service in Hypervisors","type":"publication"},{"authors":["**Le Guan**","Jingqiang Lin","Bo Luo","Jiwu Jing"],"categories":null,"content":"","date":1388552400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388552400,"objectID":"54dfafc74a9864efc927f3ed6f8ab45b","permalink":"https://guanle.org/publication/copker/","publishdate":"2014-01-01T00:00:00-05:00","relpermalink":"/publication/copker/","section":"publication","summary":"Cryptographic systems are essential for computer and communication security, for instance, RSA is used in PGP Email clients and AES is employed in full disk encryption. In practice, the cryptographic keys are loaded and stored in RAM as plain-text, and therefore vulnerable to physical memory attacks (e.g., cold-boot attacks). To tackle this problem, we propose Copker, which implements asymmetric cryptosystems entirely within the CPU, without storing plain-text private keys in the RAM. In its active mode, Copker stores kilobytes of sensitive data, including the private key and the intermediate states, only in on-chip CPU caches (and registers). Decryption/signing operations are performed without storing sensitive information in system memory. In the suspend mode, Copker stores symmetrically encrypted private keys in memory, while employs existing solutions to keep the key-encryption key securely in CPU registers. Hence, Copker releases the system resources in the suspend mode. In this paper, we implement Copker with the most common asymmetric cryptosystem, RSA, with the support of multiple private keys. We show that Copker provides decryption signing services that are secure against physical memory attacks. Meanwhile, with intensive experiments, we demonstrate that our implementation of Copker is secure and requires reasonable overhead.","tags":null,"title":"Copker: Computing with Private Keys without RAM","type":"publication"},{"authors":["Jing Wang","**Le Guan**","Limin Liu","Daren Zha"],"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"58d9b0d94bd527b25bded73327f96c72","permalink":"https://guanle.org/publication/wang-2014/","publishdate":"2019-09-08T22:35:01.265228Z","relpermalink":"/publication/wang-2014/","section":"publication","summary":"","tags":null,"title":"Implementing a Covert Timing Channel Based on Mimic Function","type":"publication"},{"authors":["Jing Wang","Peng Liu","Limin Liu","**Le Guan**","Jiwu Jing"],"categories":null,"content":"","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1356998400,"objectID":"ad9f8d792e3f5dde1708fbf85aa93d0c","permalink":"https://guanle.org/publication/wang-2013/","publishdate":"2019-09-08T22:35:01.264685Z","relpermalink":"/publication/wang-2013/","section":"publication","summary":"","tags":null,"title":"Fingerprint Embedding: A Proactive Strategy of Detecting Timing Channels","type":"publication"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"https://guanle.org/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]